version: '3.8'

services:
  db:
    image: postgres:13.0-alpine
    container_name: foodgram-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env

  # This service builds the frontend and places the result in a volume.
  # It runs once and exits, which is the desired behavior.
  frontend:
    container_name: foodgram-frontend
    build:
      context: ../frontend
      dockerfile: Dockerfile
    volumes:
      - frontend_build:/app/build

  backend:
    container_name: foodgram-backend
    build:
      context: ../backend
      dockerfile: Dockerfile
    restart: always
    volumes:
      - static_value:/app/static/
      - media_value:/app/media/
      # Give backend access to the frontend build to collect it
      - frontend_build:/app/frontend_build/
    depends_on:
      db:
        condition: service_started
      # Wait for the frontend container to successfully complete its build
      frontend:
        condition: service_completed_successfully
    env_file:
      - ./.env
    # This command now unifies all static content into a single volume
    command: >
      sh -c "python manage.py migrate &&
             cp -r /app/frontend_build/. /app/static/ &&
             python manage.py collectstatic --no-input &&
             gunicorn foodgram.wsgi:application --bind 0:8000"

  nginx:
    container_name: foodgram-proxy
    image: nginx:1.25-alpine
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      # Serve all static content from the unified 'static_value' volume
      - static_value:/usr/share/nginx/html/static/
      # Mount media and docs as before
      - media_value:/usr/share/nginx/html/media/
      - ../docs/:/usr/share/nginx/html/api/docs/
    depends_on:
      - backend

volumes:
  postgres_data:
  static_value:
  media_value:
  frontend_build: